# Launcih an AWS instance automatically..
# Required modules :  awscli, boto or boto3 install using PIP
# May get error if launched from root user..(boto error)
---
  - name: Launching an EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning

    vars:
      instance_type: t2.micro
      security_group: userinstance
      image: ami-5b673c34
      region: ap-south-1
      ac:  
      acs:  
      keypair: databricksproject
      count: 1



    tasks:
     - name: Launch the new t2 micro EC2 Instance
       local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      aws_access_key={{ ac }}
                      aws_secret_key={{ acs }}  
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
       register: ec2

    # - name: allocate a  elastic IP and associate it with an instance
    #   ec2_eip: 
    #    aws_access_key: "{{ ac }}"
    #    aws_secret_key: "{{ acs }}"
    #    instance_id: "{{ item.id }}"
    #    private_ip_address: "{{ item.private_ip }}"
    #    region: "{{ region }}"
    #   with_items: "{{ ec2.instances }}"

     - name: Add the newly created host so that we can further contact it
       add_host:
        name: "{{ item.public_ip }}"
        groups: webservers
       with_items: "{{ ec2.instances }}"
       
     - name: Writing public ip        
       local_action: copy content={{ item.public_ip }} dest=/etc/ansible/project_playbooks/publicip.txt
       with_items: "{{ ec2.instances }}"

     - name: Writing private ip   
       local_action: copy content={{ item.private_ip }} dest=/etc/ansible/project_playbooks/privateip.txt
       with_items: "{{ ec2.instances }}"

     - name: Writing Domain name
       local_action: copy content={{ item.public_dns_name }} dest=/etc/ansible/project_playbooks/publicdns.txt
       with_items: "{{ ec2.instances }}"
     
     - name: Writing instance id
       local_action: copy content={{ item.id }} dest=/etc/ansible/project_playbooks/instanceid.txt
       with_items: "{{ ec2.instances }}"

     - name: Writing Region name
       local_action: copy content={{ item.placement }} dest=/etc/ansible/project_playbooks/region.txt
       with_items: "{{ ec2.instances }}"
     - name: Wait for EC2 Instance to come-up and ready for SSH
       local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
       with_items: "{{ ec2.instances }}"

  - hosts: webservers
    remote_user: ec2-user
    sudo: yes
    gather_facts: no
    tasks:
      - name: removing key system
        lineinfile:
         path: /etc/ssh/sshd_config
         regexp: '^PasswordAuthentication'
         line: 'PasswordAuthentication yes' 

      - name: restarting service
        shell: systemctl restart sshd

      - name:  setting up the password
        shell: echo "12345" | passwd ec2-user --stdin 

      - name: installing shellinabox
        shell: sudo rpm -ivh http://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/s/shellinabox-2.20-5.el7.x86_64.rpm

      - name: starting shellinabox service
        service: name=shellinaboxd state=started enabled=yes

      - name: turning off firewall rules
        shell: iptables -F

      - name: Disabling SELINUX
        lineinfile:
         path: /etc/selinux/config
         regexp: '^SELINUX='
         line: 'SELINUX=disabled'

      - name: turn off selinux
        shell: setenforce 0


      - name: adding python3 repository
        yum_repository:
         name: centos_o
         description: custom repositories
         baseurl: http://13.126.248.209/summer19/python3/
         gpgcheck: no

      - name: installing python3
        shell: sudo yum install python3* -y

      - name: installing jupyter
        shell: sudo pip3 install jupyter

